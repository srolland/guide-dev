/*
 * jQuery LiveTwitter 1.7.4
 * - Live updating Twitter plugin for jQuery
 *
 * Copyright (c) 2009-2012 Inge JÃ¸rgensen (@elektronaut)
 * Licensed under the MIT license (MIT-LICENSE.txt)
 *
 * $Date: 2012/08/22$
 *
 * @modified by c.bavota on 10/19/2012
 */
(function (a) {
    if (!a.fn.reverse) {
        a.fn.reverse = function () {
            return this.pushStack(this.get().reverse(), arguments)
        }
    }
    a.fn.liveTwitter = function (b, c, d) {
        var e = this;
        a(this).each(function () {
            var f = {};
            if (this.twitter) {
                f = a.extend(this.twitter.settings, c);
                this.twitter.settings = f;
                if (b) {
                    this.twitter.query = b
                }
                if (this.twitter.interval) {
                    this.twitter.refresh()
                }
                if (d) {
                    this.twitter.callback = d
                }
            } else {
                f = a.extend({
                    mode: "search",
                    rate: 15e3,
                    limit: 10,
                    imageSize: 24,
                    refresh: true,
                    timeLinks: true,
                    replies: true,
                    retweets: false,
                    entities: false,
                    service: false,
                    localization: {
                        seconds: "secs ago",
                        minute: "1 min ago",
                        minutes: "mins ago",
                        hour: "an hour ago",
                        hours: "hours ago",
                        day: "a day ago",
                        days: "days ago"
                    }
                }, c);
                if (typeof f.showAuthor === "undefined") {
                    f.showAuthor = f.mode === "user_timeline" ? false : true
                }
                if (!window.twitter_callback) {
                    window.twitter_callback = function () {
                        return true
                    }
                }
                this.twitter = {
                    settings: f,
                    query: b,
                    interval: false,
                    container: this,
                    lastTimeStamp: 0,
                    callback: d,
                    relativeTime: function (a) {
                        var b = Date.parse(a);
                        var c = (Date.parse(Date()) - b) / 1e3;
                        var d = "";
                        if (c < 60) {
                            d = c + " " + f.localization.seconds
                        } else if (c < 120) {
                            d = f.localization.minute
                        } else if (c < 45 * 60) {
                            d = parseInt(c / 60, 10).toString() + " " + f.localization.minutes
                        } else if (c < 90 * 60) {
                            d = f.localization.hour
                        } else if (c < 24 * 60 * 60) {
                            d = "" + parseInt(c / 3600, 10).toString() + " " + f.localization.hours
                        } else if (c < 48 * 60 * 60) {
                            d = f.localization.day
                        } else {
                            d = parseInt(c / 86400, 10).toString() + " " + f.localization.days
                        }
                        return d
                    },
                    updateTimestamps: function () {
                        var b = this;
                        a(b.container).find("span.twitter-date").each(function () {
                            var c = b.settings.timeLinks ? a(this).find("a") : a(this);
                            c.html(b.relativeTime(this.timeStamp))
                        })
                    },
                    apiURL: function () {
                        var a = {};
                        var b = window.location.protocol === "https:" ? "https:" : "http:";
                        var c = "api.twitter.com/1/";
                        var d = "";
                        if (this.settings.service) {
                            c = this.settings.service + "/api/"
                        }
                        if (this.settings.mode === "search") {
                            c = this.settings.service ? this.settings.service + "/api/" : "search.twitter.com/";
                            d = "search";
                            a = {
                                q: this.query && this.query !== "" ? this.query : null,
                                geocode: this.settings.geocode,
                                lang: this.settings.lang,
                                rpp: this.settings.rpp ? this.settings.rpp : this.settings.limit
                            }
                        } else if (this.settings.mode === "user_timeline" || this.settings.mode === "home_timeline") {
                            d = "statuses/" + this.settings.mode + "/" + encodeURIComponent(this.query);
                            a = {
                                count: this.settings.limit,
                                include_rts: this.settings.mode === "user_timeline" && this.settings.retweets ? "1" : null,
                                exclude_replies: !this.settings.replies ? "1" : null
                            }
                        } else if (this.settings.mode === "favorites") {
                            d = "favorites";
                            a = {
                                id: encodeURIComponent(this.query)
                            }
                        } else if (this.settings.mode === "list") {
                            d = encodeURIComponent(this.query.user) + "/lists/" + encodeURIComponent(this.query.list) + "/statuses";
                            a = {
                                per_page: this.settings.limit,
                                include_rts: this.settings.retweets ? "1" : null,
                            }
                        }
                        a.include_entities = this.settings.entities ? "1" : null;
                        var e = [];
                        for (var f in a) {
                            if (a.hasOwnProperty(f) && typeof a[f] !== "undefined" && a[f] !== null) {
                                e[e.length] = f + "=" + encodeURIComponent(a[f])
                            }
                        }
                        e = e.join("&");
                        return b + "//" + c + d + ".json?" + e + "&callback=?"
                    },
                    parseTweet: function (b) {
                        var c = {
                            id: b.id_str ? b.id_str : b.id,
                            text: b.text,
                            created_at: b.created_at
                        };
                        if (this.settings.mode === "search") {
                            c = a.extend(c, {
                                screen_name: b.from_user,
                                profile_image_url: b.profile_image_url
                            })
                        } else {
                            c = a.extend(c, {
                                screen_name: b.user.screen_name,
                                profile_image_url: b.user.profile_image_url,
                                created_at: b.created_at.replace(/^(\w+)\s(\w+)\s(\d+)(.*)(\s\d+)$/, "$1, $3 $2$5$4")
                            })
                        }
                        if (this.settings.service) {
                            c = a.extend(c, {
                                url: "http://" + this.settings.service + "/notice/" + c.id,
                                profile_url: "http://" + this.settings.service + "/" + b.from_user
                            });
                            if (window.location.protocol === "https:") {
                                c.profile_image_url = c.profile_image_url.replace("http:", "https:")
                            }
                        } else {
                            c = a.extend(c, {
                                url: "http://twitter.com/#!/" + c.screen_name + "/status/" + c.id,
                                profile_url: "http://twitter.com/#!/" + c.screen_name
                            });
                            if (window.location.protocol === "https:") {
                                var d = c.profile_image_url.match(/http[s]?:\/\/a[0-9]\.twimg\.com\/(\w+)\/(\w+)\/(.*?)\.(\w+)/i);
                                if (d) {
                                    c.profile_image_url = "https://s3.amazonaws.com/twitter_production/" + d[1] + "/" + d[2] + "/" + d[3] + "." + d[4]
                                } else {
                                    c.profile_image_url = c.profile_image_url.replace("http:", "https:")
                                }
                            }
                        }
                        return c
                    },
                    parseText: function (a) {
                        a = a.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&\?\/.=]+/g, function (a) {
                            return '<a target="_blank" href="' + a + '" rel="external">' + a + "</a>"
                        });
                        if (!this.settings.service) {
                            a = a.replace(/@[A-Za-z0-9_]+/g, function (a) {
                                return '<a target="_blank" href="http://twitter.com/#!/' + a.replace(/^@/, "") + '" rel="external">' + a + "</a>"
                            });
                            a = a.replace(/#[A-Za-z0-9_\-]+/g, function (a) {
                                return '<a target="_blank" href="http://twitter.com/#!/search?q=' + a.replace(/^#/, "%23") + '" rel="external">' + a + "</a>"
                            })
                        } else {
                            a = a.replace(/@[A-Za-z0-9_]+/g, function (a) {
                                return '<a target="_blank" href="http://' + f.service + "/" + a.replace(/^@/, "") + '" rel="external">' + a + "</a>"
                            });
                            a = a.replace(/#[A-Za-z0-9_\-]+/g, function (a) {
                                return '<a target="_blank" href="http://' + f.service + "/search/notice?q?" + a.replace(/^#/, "%23") + '" rel="external">' + a + "</a>"
                            })
                        }
                        return a
                    },
                    renderTweet: function (a) {
                        var b = '<article class="top-comment tweet tweet-' + a.id + '">';
                        if (this.settings.showAuthor) {
                            b += '<img width="' + this.settings.imageSize + '" height="' + this.settings.imageSize + '" src="' + a.profile_image_url + '" class="alignleft" />';
                            b += '<header><h4><a target="_blank" href="' + a.profile_url + '" rel="external">' + a.screen_name + "</a></h4></header> "
                        }
                        b += '<p>' + this.parseText(a.text) + "</p>";
                        b += '<p>';
                        b += '<span class="twitter-date"><i class="icon-twitter"></i> ';
                        if (this.settings.timeLinks) {
                            b += '<a target="_blank" href="' + a.url + '" rel="external">';
                            b += this.relativeTime(a.created_at);
                            b += "</a>"
                        } else {
                            b += this.relativeTime(a.created_at)
                        }
                        b += '</span>';
                        b += '<span class="twitter-reply"><i class="icon-share-alt"></i> <a href="https://twitter.com/intent/tweet?in_reply_to=' + a.id + '" target="_blank">Reply</a></span>';
                        b += '<span class="twitter-retweet"><i class="icon-retweet"></i> <a href="https://twitter.com/intent/retweet?tweet_id=' + a.id + '" target="_blank">Retweet</a></span>';
                        b += '<span class="twitter-favorite"><i class="icon-star-empty"></i> <a href="https://twitter.com/intent/favorite?tweet_id=' + a.id + '" target="_blank">Favorite</a></span>';
                        b += "</p></article>";
                        return b
                    },
                    refresh: function (b) {
                        var c = this;
                        if (c.settings.refresh || b) {
                            var cb = new Codebird;
                            cb.setConsumerKey('h2R0TgWaMri7mn7cIzJyw', 'hEcNa2BVuFBf5DNdJ8GjLtIDEl2uvap2S4mrCEgxI');
                            cb.setToken('22842362-Zm0EEbqpYGyrQkAV5b1efSNbD8wwwQd1hx2fkbQE5', 'wLtRQISnmZCdc0sNYd3I8cQHbZPpxCigmzcVSC0Q');
                            var params = {
                                slug: this.query.list,
                                owner_screen_name: this.query.user,
                                count: c.settings.limit
                            };
                            cb.__call(
                                'lists_statuses',
                                params,
                                function (d) {
                                var f = 0;
                                var g = c.settings.mode === "search" ? d.results : d;
                                a(g).reverse().each(function () {
                                    if (!c.settings.filter || c.settings.filter(this)) {
                                        var d = c.parseTweet(this);
                                        if (Date.parse(d.created_at) > c.lastTimeStamp) {
                                            a(c.container).prepend(c.renderTweet(d));
                                            a(c.container).find("span.twitter-date:first").each(function () {
                                                this.timeStamp = d.created_at
                                            });
                                            if (!b) {
                                                a(c.container).find(".tweet-" + d.id).hide().fadeIn()
                                            }
                                            c.lastTimeStamp = Date.parse(d.created_at);
                                            f += 1
                                        }
                                    }
                                });
                                if (f > 0) {
                                    a(c.container).find("article.tweet:gt(" + (c.settings.limit - 1) + ")").remove();
                                    if (c.callback) {
                                        c.callback(e, f)
                                    }
                                    a(e).trigger("tweets")
                                }
                            })
                        }
                    },
                    start: function () {
                        var a = this;
                        if (!this.interval) {
                            this.interval = setInterval(function () {
                                a.refresh()
                            }, a.settings.rate);
                            this.refresh(true)
                        }
                    },
                    stop: function () {
                        if (this.interval) {
                            clearInterval(this.interval);
                            this.interval = false
                        }
                    },
                    clear: function () {
                        a(this.container).find("article.tweet").remove();
                        this.lastTimeStamp = null
                    }
                };
                var g = this.twitter;
                this.timeInterval = setInterval(function () {
                    g.updateTimestamps()
                }, 5e3);
                this.twitter.start()
            }
        });
        return this
    }
})(jQuery)